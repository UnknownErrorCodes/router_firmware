name: newifi3

env:
  TZ: Asia/Shanghai
  BUILD_SH: newifi3/build.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: true

on:
  push:
    branches:
      - master
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * *'

jobs:
  build:
    runs-on: ubuntu-20.04
    env:
      WORK_PATH: /home/runner/work/newifi3-d2-openwrt/newifi3-d2-openwrt

    steps:
      - name: Clone Repository
        uses: actions/checkout@v3

      - name: Build Environment Initialization
        run: |
          sudo apt-get update
          sudo apt-get -qq remove --purge mysql* php* google* firefox ghc azure-cli \
          dotnet* powershell ruby-full zulu* hhvm llvm*

          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /var/lib/docker
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/hostedtoolcache/go /opt/hostedtoolcache/Ruby /opt/hostedtoolcache/node

          sudo apt-get install -qq -y build-essential asciidoc binutils bzip2 gawk gettext \
          git libncurses5-dev libz-dev patch python3 python2.7 unzip zlib1g-dev lib32gcc1 \
          libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full \
          msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf \
          automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget curl swig rsync

          sudo apt-get -qq autoremove --purge
          sudo apt-get -qq clean

      - name: Build Immortalwrt
        run: |
          chmod +x $BUILD_SH && $BUILD_SH

      - name: Check space usage
        if: (!cancelled())
        run: df -hT

      - name: Upload bin directory
        uses: actions/upload-artifact@main
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
        with:
          name: immortalwrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: immortalwrt/bin

      - name: Organize files
        id: organize
        if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        run: |
          cd immortalwrt/bin/targets/*/*
          rm -rf packages
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "::set-output name=status::success"

      - name: Upload firmware directory
        uses: actions/upload-artifact@main
        if: steps.organize.outputs.status == 'success' && !cancelled()
        with:
          name: immortalwrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}

      - name: Upload firmware to cowtransfer
        id: cowtransfer
        if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
        run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
          echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
          echo "::set-output name=url::$(cat cowtransfer.log | grep https | cut -f3 -d" ")"

      - name: Upload firmware to WeTransfer
        id: wetransfer
        if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
        run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
          echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
          echo "::set-output name=url::$(cat wetransfer.log | grep https | cut -f3 -d" ")"

      - name: Generate release tag
        id: tag
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        run: |
          echo "::set-output name=release_tag::newifi3_$(date +"%Y.%m.%d-%H%M")"
          touch release.txt
          [ $UPLOAD_COWTRANSFER = true ] && echo "ðŸ”— [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
          [ $UPLOAD_WETRANSFER = true ] && echo "ðŸ”— [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
          echo "::set-output name=status::success"

      - name: Upload firmware to release
        uses: softprops/action-gh-release@v1
        if: steps.tag.outputs.status == 'success' && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: ${{ env.FIRMWARE }}/*

      - name: Delete workflow runs
        uses: GitRML/delete-workflow-runs@main
        with:
          retain_days: 1
          keep_minimum_runs: 3

#    - name: Remove old Releases
#      uses: dev-drprasad/delete-older-releases@v0.1.0
#      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
#      with:
#        keep_latest: 5
#        delete_tags: true
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


#       - name: Upload manifest
#         uses: actions/upload-artifact@v3
#         with:
#           name: manifest-${{ env.FILE_DATE }}
#           path: /home/runner/work/newifi3-d2-openwrt/newifi3-d2-openwrt/immortalwrt/bin/targets/ramips/mt7621/immortalwrt-ramips-mt7621-d-team_newifi-d2.manifest
